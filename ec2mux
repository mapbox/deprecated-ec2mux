#!/bin/bash
if [ ! -f $HOME/.s3cfg ]; then
    echo ".s3cfg not found"
    exit 1
fi

AWSK=$(grep access_key ~/.s3cfg | grep -oE "[^ =]+$")
AWSS=$(grep secret_key ~/.s3cfg | grep -oE "[^ =]+$")

if [ -h $0 ]; then
  SWARMPATH="$(dirname $(dirname $0)/$(readlink $0))/node_modules/swarm/bin/swarm"
else
  SWARMPATH="$(dirname $(dirname $0))/node_modules/swarm/bin/swarm"
fi
if [ ! -f $SWARMPATH ]; then
  echo "'swarm' command not found."
  exit 1
fi

### Parse arguments
while getopts ":i:" opt; do
  case $opt in
    i ) IDENT="-i $OPTARG" ;;
    : )
      echo "Option -$OPTARG requires an argument." >&2
      exit 1 ;;
  esac
  shift $((OPTIND-1))
done

SWARM=$(echo $1 | grep -oE "[^@]+$")
TMUX="$SWARM"
if [ -z $SWARM ]; then
    echo "Usage:"
    echo "  ec2mux [-i keyfile] [user@]<swarm>"
    echo "Example:"
    echo "  ec2mux demo                        connect to ec2s tagged Swarm:demo"
    echo "  ec2mux custom@demo                 connect as user custom"
    echo "  ec2mux -i ~/.ssh/mykey.pem demo    use mykey.pem"
    exit;
fi

### Allow user to be specified with <user>@<swarm>
if echo "$1" | grep "@" > /dev/null; then
  USERNAME="$(echo "$1" | grep "@" | grep -oE "^[^@]+")@"
else
  USERNAME="ubuntu@"
fi

### Query for swarm hostnames to connect to.
SWARM_HOSTNAMES=$($SWARMPATH --awsKey=$AWSK --awsSecret=$AWSS metadata --filter.Swarm $SWARM --attribute dnsName)
if [ -z $SWARM_HOSTNAMES ]; then
  echo "No EC2s with tag Swarm:$SWARM found."
  exit 1
fi

tmux new-session -d -s $TMUX
for HOST in $SWARM_HOSTNAMES
do
    echo $HOST;
    tmux split-window -t $TMUX "ssh $IDENT -CA ${USERNAME}${HOST}"
    tmux select-layout tiled
done

tmux kill-pane -t $TMUX:0.0
tmux select-layout tiled
tmux -2 attach-session -t $TMUX
